// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/emccode/libstorage/api/types (interfaces: StorageDriver)

package mocks

import (
	gofig "github.com/akutz/gofig"
	types "github.com/emccode/libstorage/api/types"
	gomock "github.com/golang/mock/gomock"
)

// Mock of StorageDriver interface
type MockStorageDriver struct {
	ctrl     *gomock.Controller
	recorder *_MockStorageDriverRecorder
}

// Recorder for MockStorageDriver (not exported)
type _MockStorageDriverRecorder struct {
	mock *MockStorageDriver
}

func NewMockStorageDriver(ctrl *gomock.Controller) *MockStorageDriver {
	mock := &MockStorageDriver{ctrl: ctrl}
	mock.recorder = &_MockStorageDriverRecorder{mock}
	return mock
}

func (_m *MockStorageDriver) EXPECT() *_MockStorageDriverRecorder {
	return _m.recorder
}

func (_m *MockStorageDriver) Init(_param0 types.Context, _param1 gofig.Config) error {
	ret := _m.ctrl.Call(_m, "Init", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageDriverRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0, arg1)
}

func (_m *MockStorageDriver) InstanceInspect(_param0 types.Context, _param1 types.Store) (*types.Instance, error) {
	ret := _m.ctrl.Call(_m, "InstanceInspect", _param0, _param1)
	ret0, _ := ret[0].(*types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) InstanceInspect(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstanceInspect", arg0, arg1)
}

func (_m *MockStorageDriver) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStorageDriverRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

func (_m *MockStorageDriver) NextDeviceInfo(_param0 types.Context) (*types.NextDeviceInfo, error) {
	ret := _m.ctrl.Call(_m, "NextDeviceInfo", _param0)
	ret0, _ := ret[0].(*types.NextDeviceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) NextDeviceInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NextDeviceInfo", arg0)
}

func (_m *MockStorageDriver) SnapshotCopy(_param0 types.Context, _param1 string, _param2 string, _param3 string, _param4 types.Store) (*types.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "SnapshotCopy", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) SnapshotCopy(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotCopy", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockStorageDriver) SnapshotInspect(_param0 types.Context, _param1 string, _param2 types.Store) (*types.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "SnapshotInspect", _param0, _param1, _param2)
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) SnapshotInspect(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotInspect", arg0, arg1, arg2)
}

func (_m *MockStorageDriver) SnapshotRemove(_param0 types.Context, _param1 string, _param2 types.Store) error {
	ret := _m.ctrl.Call(_m, "SnapshotRemove", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageDriverRecorder) SnapshotRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotRemove", arg0, arg1, arg2)
}

func (_m *MockStorageDriver) Snapshots(_param0 types.Context, _param1 types.Store) ([]*types.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "Snapshots", _param0, _param1)
	ret0, _ := ret[0].([]*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) Snapshots(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Snapshots", arg0, arg1)
}

func (_m *MockStorageDriver) Type(_param0 types.Context) (types.StorageType, error) {
	ret := _m.ctrl.Call(_m, "Type", _param0)
	ret0, _ := ret[0].(types.StorageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) Type(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Type", arg0)
}

func (_m *MockStorageDriver) VolumeAttach(_param0 types.Context, _param1 string, _param2 *types.VolumeAttachOpts) (*types.Volume, string, error) {
	ret := _m.ctrl.Call(_m, "VolumeAttach", _param0, _param1, _param2)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockStorageDriverRecorder) VolumeAttach(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeAttach", arg0, arg1, arg2)
}

func (_m *MockStorageDriver) VolumeCopy(_param0 types.Context, _param1 string, _param2 string, _param3 types.Store) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeCopy", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) VolumeCopy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeCopy", arg0, arg1, arg2, arg3)
}

func (_m *MockStorageDriver) VolumeCreate(_param0 types.Context, _param1 string, _param2 *types.VolumeCreateOpts) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeCreate", _param0, _param1, _param2)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) VolumeCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeCreate", arg0, arg1, arg2)
}

func (_m *MockStorageDriver) VolumeCreateFromSnapshot(_param0 types.Context, _param1 string, _param2 string, _param3 *types.VolumeCreateOpts) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeCreateFromSnapshot", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) VolumeCreateFromSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeCreateFromSnapshot", arg0, arg1, arg2, arg3)
}

func (_m *MockStorageDriver) VolumeDetach(_param0 types.Context, _param1 string, _param2 *types.VolumeDetachOpts) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeDetach", _param0, _param1, _param2)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) VolumeDetach(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeDetach", arg0, arg1, arg2)
}

func (_m *MockStorageDriver) VolumeInspect(_param0 types.Context, _param1 string, _param2 *types.VolumeInspectOpts) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeInspect", _param0, _param1, _param2)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) VolumeInspect(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeInspect", arg0, arg1, arg2)
}

func (_m *MockStorageDriver) VolumeRemove(_param0 types.Context, _param1 string, _param2 types.Store) error {
	ret := _m.ctrl.Call(_m, "VolumeRemove", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStorageDriverRecorder) VolumeRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeRemove", arg0, arg1, arg2)
}

func (_m *MockStorageDriver) VolumeSnapshot(_param0 types.Context, _param1 string, _param2 string, _param3 types.Store) (*types.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "VolumeSnapshot", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) VolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeSnapshot", arg0, arg1, arg2, arg3)
}

func (_m *MockStorageDriver) Volumes(_param0 types.Context, _param1 *types.VolumesOpts) ([]*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "Volumes", _param0, _param1)
	ret0, _ := ret[0].([]*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStorageDriverRecorder) Volumes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Volumes", arg0, arg1)
}
