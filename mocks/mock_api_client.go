// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/emccode/libstorage/api/types (interfaces: APIClient)

package mocks

import (
	types "github.com/emccode/libstorage/api/types"
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// Mock of APIClient interface
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAPIClientRecorder
}

// Recorder for MockAPIClient (not exported)
type _MockAPIClientRecorder struct {
	mock *MockAPIClient
}

func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &_MockAPIClientRecorder{mock}
	return mock
}

func (_m *MockAPIClient) EXPECT() *_MockAPIClientRecorder {
	return _m.recorder
}

func (_m *MockAPIClient) ExecutorGet(_param0 types.Context, _param1 string) (io.ReadCloser, error) {
	ret := _m.ctrl.Call(_m, "ExecutorGet", _param0, _param1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) ExecutorGet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecutorGet", arg0, arg1)
}

func (_m *MockAPIClient) ExecutorHead(_param0 types.Context, _param1 string) (*types.ExecutorInfo, error) {
	ret := _m.ctrl.Call(_m, "ExecutorHead", _param0, _param1)
	ret0, _ := ret[0].(*types.ExecutorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) ExecutorHead(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecutorHead", arg0, arg1)
}

func (_m *MockAPIClient) Executors(_param0 types.Context) (map[string]*types.ExecutorInfo, error) {
	ret := _m.ctrl.Call(_m, "Executors", _param0)
	ret0, _ := ret[0].(map[string]*types.ExecutorInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) Executors(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Executors", arg0)
}

func (_m *MockAPIClient) InstanceInspect(_param0 types.Context, _param1 string) (*types.Instance, error) {
	ret := _m.ctrl.Call(_m, "InstanceInspect", _param0, _param1)
	ret0, _ := ret[0].(*types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) InstanceInspect(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstanceInspect", arg0, arg1)
}

func (_m *MockAPIClient) Instances(_param0 types.Context) (map[string]*types.Instance, error) {
	ret := _m.ctrl.Call(_m, "Instances", _param0)
	ret0, _ := ret[0].(map[string]*types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) Instances(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Instances", arg0)
}

func (_m *MockAPIClient) LogRequests(_param0 bool) {
	_m.ctrl.Call(_m, "LogRequests", _param0)
}

func (_mr *_MockAPIClientRecorder) LogRequests(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogRequests", arg0)
}

func (_m *MockAPIClient) LogResponses(_param0 bool) {
	_m.ctrl.Call(_m, "LogResponses", _param0)
}

func (_mr *_MockAPIClientRecorder) LogResponses(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LogResponses", arg0)
}

func (_m *MockAPIClient) Root(_param0 types.Context) ([]string, error) {
	ret := _m.ctrl.Call(_m, "Root", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) Root(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Root", arg0)
}

func (_m *MockAPIClient) ServerName() string {
	ret := _m.ctrl.Call(_m, "ServerName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockAPIClientRecorder) ServerName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServerName")
}

func (_m *MockAPIClient) ServiceInspect(_param0 types.Context, _param1 string) (*types.ServiceInfo, error) {
	ret := _m.ctrl.Call(_m, "ServiceInspect", _param0, _param1)
	ret0, _ := ret[0].(*types.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) ServiceInspect(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ServiceInspect", arg0, arg1)
}

func (_m *MockAPIClient) Services(_param0 types.Context) (map[string]*types.ServiceInfo, error) {
	ret := _m.ctrl.Call(_m, "Services", _param0)
	ret0, _ := ret[0].(map[string]*types.ServiceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) Services(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Services", arg0)
}

func (_m *MockAPIClient) SnapshotCopy(_param0 types.Context, _param1 string, _param2 string, _param3 *types.SnapshotCopyRequest) (*types.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "SnapshotCopy", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) SnapshotCopy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotCopy", arg0, arg1, arg2, arg3)
}

func (_m *MockAPIClient) SnapshotInspect(_param0 types.Context, _param1 string, _param2 string) (*types.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "SnapshotInspect", _param0, _param1, _param2)
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) SnapshotInspect(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotInspect", arg0, arg1, arg2)
}

func (_m *MockAPIClient) SnapshotRemove(_param0 types.Context, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "SnapshotRemove", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIClientRecorder) SnapshotRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotRemove", arg0, arg1, arg2)
}

func (_m *MockAPIClient) Snapshots(_param0 types.Context) (types.ServiceSnapshotMap, error) {
	ret := _m.ctrl.Call(_m, "Snapshots", _param0)
	ret0, _ := ret[0].(types.ServiceSnapshotMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) Snapshots(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Snapshots", arg0)
}

func (_m *MockAPIClient) SnapshotsByService(_param0 types.Context, _param1 string) (types.SnapshotMap, error) {
	ret := _m.ctrl.Call(_m, "SnapshotsByService", _param0, _param1)
	ret0, _ := ret[0].(types.SnapshotMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) SnapshotsByService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SnapshotsByService", arg0, arg1)
}

func (_m *MockAPIClient) VolumeAttach(_param0 types.Context, _param1 string, _param2 string, _param3 *types.VolumeAttachRequest) (*types.Volume, string, error) {
	ret := _m.ctrl.Call(_m, "VolumeAttach", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockAPIClientRecorder) VolumeAttach(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeAttach", arg0, arg1, arg2, arg3)
}

func (_m *MockAPIClient) VolumeCopy(_param0 types.Context, _param1 string, _param2 string, _param3 *types.VolumeCopyRequest) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeCopy", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeCopy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeCopy", arg0, arg1, arg2, arg3)
}

func (_m *MockAPIClient) VolumeCreate(_param0 types.Context, _param1 string, _param2 *types.VolumeCreateRequest) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeCreate", _param0, _param1, _param2)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeCreate", arg0, arg1, arg2)
}

func (_m *MockAPIClient) VolumeCreateFromSnapshot(_param0 types.Context, _param1 string, _param2 string, _param3 *types.VolumeCreateRequest) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeCreateFromSnapshot", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeCreateFromSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeCreateFromSnapshot", arg0, arg1, arg2, arg3)
}

func (_m *MockAPIClient) VolumeDetach(_param0 types.Context, _param1 string, _param2 string, _param3 *types.VolumeDetachRequest) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeDetach", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeDetach(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeDetach", arg0, arg1, arg2, arg3)
}

func (_m *MockAPIClient) VolumeDetachAll(_param0 types.Context, _param1 *types.VolumeDetachRequest) (types.ServiceVolumeMap, error) {
	ret := _m.ctrl.Call(_m, "VolumeDetachAll", _param0, _param1)
	ret0, _ := ret[0].(types.ServiceVolumeMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeDetachAll(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeDetachAll", arg0, arg1)
}

func (_m *MockAPIClient) VolumeDetachAllForService(_param0 types.Context, _param1 string, _param2 *types.VolumeDetachRequest) (types.VolumeMap, error) {
	ret := _m.ctrl.Call(_m, "VolumeDetachAllForService", _param0, _param1, _param2)
	ret0, _ := ret[0].(types.VolumeMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeDetachAllForService(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeDetachAllForService", arg0, arg1, arg2)
}

func (_m *MockAPIClient) VolumeInspect(_param0 types.Context, _param1 string, _param2 string, _param3 bool) (*types.Volume, error) {
	ret := _m.ctrl.Call(_m, "VolumeInspect", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeInspect(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeInspect", arg0, arg1, arg2, arg3)
}

func (_m *MockAPIClient) VolumeRemove(_param0 types.Context, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "VolumeRemove", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIClientRecorder) VolumeRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeRemove", arg0, arg1, arg2)
}

func (_m *MockAPIClient) VolumeSnapshot(_param0 types.Context, _param1 string, _param2 string, _param3 *types.VolumeSnapshotRequest) (*types.Snapshot, error) {
	ret := _m.ctrl.Call(_m, "VolumeSnapshot", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(*types.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumeSnapshot(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumeSnapshot", arg0, arg1, arg2, arg3)
}

func (_m *MockAPIClient) Volumes(_param0 types.Context, _param1 bool) (types.ServiceVolumeMap, error) {
	ret := _m.ctrl.Call(_m, "Volumes", _param0, _param1)
	ret0, _ := ret[0].(types.ServiceVolumeMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) Volumes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Volumes", arg0, arg1)
}

func (_m *MockAPIClient) VolumesByService(_param0 types.Context, _param1 string, _param2 bool) (types.VolumeMap, error) {
	ret := _m.ctrl.Call(_m, "VolumesByService", _param0, _param1, _param2)
	ret0, _ := ret[0].(types.VolumeMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIClientRecorder) VolumesByService(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VolumesByService", arg0, arg1, arg2)
}
